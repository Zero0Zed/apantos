#+TITLE: Apantos doc - main
#+AUTHOR: Ali Shahidi
#+DESCRIPTION: Apantos document main page
#+OPTIONS: num:nil ^:{}


* TABLE OF CONTENTS :toc:
- [[#what-is-apantos][What is apantos]]
- [[#what-is-framework-architecture-][What is framework architecture ?]]
- [[#directory-structure][Directory Structure]]
- [[#directory-explanation][Directory explanation]]
  - [[#app][app]]
  - [[#bootstrap][bootstrap]]
  - [[#public][public]]
  - [[#resources][resources]]
  - [[#routes][routes]]
  - [[#storage][storage]]
  - [[#system][system]]
- [[#routing-system][Routing system]]
  - [[#how-create-route][How create route]]
- [[#controllers][Controllers]]
- [[#model][Model]]

* What is apantos

Apantos is a fast and simple framework based on php with security methods and dedicated orm. Modularly


* What is framework architecture ?

this framework use mvc architecture

models in *app/Models*
views in *resources/view*
controllers in *app/Controllers*

* Directory Structure
- app
  - Http
    - Controllers
    - Request
    - Services
  - Models
  - Providers
- bootstrap
  - /bootstrap.php/
- config
  - /app.php/
  - /database.php/
  - /image.php/
  - /mail.php/
- database
  - migrations
- public
  - /index.php/
- resources
  - view
- routes
  - /api.php/
  - /web.php/
- storage
  - fonts
  - images
- system


* Directory explanation

** app

Important directory contain controllers and request and .... for manage routes handlers and check form input and more

*** Http

Contain web request handlers and services

**** Controllers

Management classes for routes

standard name: =NameController.php=

**** Request

User input checkers

standard name: =NameRequest.php=

**** Services

Refactored classes

standard name: =Name.php=

*** Models

Database Models

standard name =Name.php= *Use singular nouns*

*** Providers

Providers run each request if stored in config file

standard name: =NameProvider.php=

** bootstrap

contain =bootstrap.php= file

The job of this file is to load the framework

** public

this direcotry serve as root directory

every request must be redirect to =index.php= file

** resources

contain view direcotry

*** view

contain views direcotry & php file

standard name for use apts template engine: =view.apts.php=
standard name for normal use without template engine: =view.php=

** routes

*** web.php

for web request routes

*** api.php

for api request routes

** storage

for in project files
ex: files used for packages

** system

kernel of framework

* Routing system

all routes available in *routes/{web, api}.php* file

** How create route

*** Note

web route start from */*
api routes start from */api*

*** Argvs

1. url
2. Controller with namespace & class function name after @
3. route name

*** Get

#+begin_src php

Route::get('/', "Home\HomeController@index", 'home.index');

#+end_src

*** Post

#+begin_src php

Route::post('/login', "Auth\LoginController@login", 'auth.login');

#+end_src

*** Put

#+begin_src php

Route::put('/admin/article/update/{id}', "Admin\ArticleController@update", 'admin.article.update');

#+end_src

*** Delete

#+begin_src php

Route::delete('/admin/article/delete/{id}', "Admin\ArticleController@destroy",'admin.article.delete');

#+end_src


* Controllers

controllers called by routing system

controllers must be set in =Route= method

create your Controllers in *app/Http/Controller* like this

#+begin_src php

namespace App\Http\Controllers\Home;

use App\Http\Controllers\Controller;

class HomeController extends Controller
{
    public function index()
    {
        return "Hi";
    }
}

#+end_src

for use this example you must set Route for called index method in HomeController

#+begin_src php

Route::get('/', "Home\HomeController@index", 'home.index');

#+end_src

now if open */* url in your browser you can see "Hi" message;

* Model

create your models in *app/Models* like this

#+begin_src php

namespace App\Models;

use System\Database\ORM\Model;
use System\Database\Traits\HasSoftDelete;

class User extends Model
{
    use HasSoftDelete;

    protected $table = 'users';

    protected $fillable = ['name', 'email', 'password', 'avatar', 'permissions', 'bio'];

    protected $casts = ['permission' => 'arrray']
}

#+end_src

use *Use singular nouns* for Model name and set full name of table in =protected $table=

you must set fillable table column in =protected $fillable=
id, create_at, updated_at, deleted_at exist by default in fillables

*casts* can convert arrays to safe string for stored in database and can convert string to array when you get record from database
